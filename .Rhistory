knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(glmnet)
library(gridExtra)
train <- read.csv('Train.csv')
test <- read.csv('Test.csv')
head(train)
test <- mutate(test, Item_Outlet_Sales = 0)
dim(train)
dim(test)
data <- rbind(train, test)
dim(data)
str(data)
data <- data %>%
mutate(Item_Fat_Content = replace(Item_Fat_Content, Item_Fat_Content == 'LF', 'Low Fat')) %>%
mutate(Item_Fat_Content = replace(Item_Fat_Content, Item_Fat_Content == 'low fat', 'Low Fat')) %>%
mutate(Item_Fat_Content = replace(Item_Fat_Content, Item_Fat_Content == 'reg', 'Regular')) %>%
droplevels()
data %>%
group_by(Outlet_Location_Type, Outlet_Type, Outlet_Size) %>%
count()
data <- data %>%
mutate(Outlet_Size = replace(Outlet_Size, Outlet_Size == '' & Outlet_Location_Type == 'Tier 2', 'Small')) %>%
mutate(Outlet_Size = replace(Outlet_Size, Outlet_Size == '' & Outlet_Location_Type == 'Tier 3', 'Small'))
sapply(data, function(x) sum(x == ''))
a <- data %>%
group_by(Item_Type) %>%
filter(is.na(Item_Weight)) %>%
count()
ggplot(a, aes(Item_Type, n)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle=75, vjust=0.7))
b <- data %>%
group_by(Item_Type) %>%
summarise_at(vars(Item_Weight), funs(mean(., na.rm=T)))
b
test_c <- data %>%
filter(is.na(Item_Weight)) %>%
mutate(Item_Weight = replace(Item_Weight, b$Item_Type == Item_Type, b$Item_Weight))
summary(data)
b
test_c <- data %>%
filter(is.na(Item_Weight)) %>%
mutate(Item_Weight = replace(Item_Weight, Item_Type == b$Item_Type, b$Item_Weight))
test_c
?replace_na
item_avg_weight = data.pivot_table(values='Item_Weight', index='Item_Identifier')
test_c <- data %>%
filter(is.na(Item_Weight)) %>%
mutate(Item_Weight = replace(Item_Weight, Item_Type == b$Item_Type, b$Item_Weight))
test_c
test_c <- data %>%
filter(is.na(Item_Weight))
test_c
test_c$Item_Weight[1]
test_c$Item_Type[1]
?mutate_at
test_c <- data %>%
filter(is.na(Item_Weight)) %>%
mutate(Item_Weight = replace(Item_Weight, Item_Type == b$Item_Type, b$Item_Weight))
test_c <- data %>%
filter(is.na(Item_Weight)) %>%
mutate(Item_Weight = replace(Item_Weight, Item_Type %in% b$Item_Type, b$Item_Weight))
test_c
test_c <- data %>%
filter(is.na(Item_Weight)) %>%
mutate(Item_Weight = replace(Item_Weight, Item_Type[i] == b$Item_Type[i], b$Item_Weight))
test_c <- data %>%
filter(is.na(Item_Weight))
for (i in nrow(test_c)){
if (test_c$Item_Type[i] == b$Item_Type[i]){
test_c$Item_Weight[i] <- b$Item_Weight[i]
}
}
test_c
nrow(test_c)
test_c <- data %>%
filter(is.na(Item_Weight))
for (i in 1:nrow(test_c)){
if (test_c$Item_Type[i] == b$Item_Type[i]){
test_c$Item_Weight[i] <- b$Item_Weight[i]
}
}
test_c$Item_Weight
test_c %>%
group_by(Item_Weight)
?impute.mean
?impute
??impute.mean
data %>%
group_by(Item_Weight) %>%
mutate(Item_Weight <- impute.mean(Item_Weight))
library(dplyr)
data %>%
group_by(Item_Weight) %>%
mutate(Item_Weight <- impute.mean(Item_Weight))
?%in%
?which
b
test_c %?%
mutate(Item_Weight = replace(Item_Weight, which(Item_Type == b$Item_Type), b$Item_Weight))
test_c <- data %>%
filter(is.na(Item_Weight)) %>%
mutate(Item_Weight = replace(Item_Weight, Item_Type[i] == b$Item_Type[i], b$Item_Weight))
test_c$Item_Weight[is.na(test_c$Item_Weight)] <- mean(test_c$Item_Weight)
test_c
impute_mean <- function(x) replace(x, is.na(x), mean(x, na.rm = T))
impute_mean <- function(x) replace(x, is.na(x), mean(x, na.rm = T))
test2 <- data %>%
group_by(Item_Type) %>%
mutate(Item_Weight = impute.mean(Item_Weight))
impute_mean <- function(x) replace(x, is.na(x), mean(x, na.rm = T))
test2 <- data %>%
group_by(Item_Type) %>%
mutate(Item_Weight = impute_mean(Item_Weight))
test2
summary(test2)
head(test2)
head(data)
?head
summary(data)
summary(test2)
test2
a <- data %>%
group_by(Item_Type) %>%
filter(is.na(Item_Weight)) %>%
count()
ggplot(a, aes(Item_Type, n)) +
geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle=75, vjust=0.7))
b <- data %>%
group_by(Item_Type) %>%
summarise_at(vars(Item_Weight), funs(mean(., na.rm=T)))
b
a <- ggplot(data, aes(Outlet_Size, Outlet_Location_Type)) +
geom_point()
b <- ggplot(data, aes(Outlet_Size, Outlet_Type)) +
geom_point()
grid.arrange(a, b, ncol=2)
sapply(data, function(x) n_distinct(x))
summary(data)
ggplot(data, aes(Item_Visibility, Item_Outlet_Sales)) +
geom_point(size = 0.75)
ggplot(data, aes(Item_Type, Item_Outlet_Sales)) +
geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=60, vjust=0.75))
ggplot(data, aes(Item_Type, Item_Visibility)) +
geom_point(size=0.75) +
theme(axis.text.x = element_text(angle=90, vjust=0.8))
ggplot(train, aes(Item_Visibility, Item_Outlet_Sales, color = Item_Type)) +
geom_point(size = 0.75)
ggplot(data, aes(Item_Type, Item_Visibility)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle=90, vjust=0.8))
ggplot(data, aes(Item_Type, Item_Visibility)) +
geom_boxplot()
ggplot(data, aes(Item_Type, Item_Visibility)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle=90, vjust=0.8))
zero_viz <- data %>%
filter(Item_Visibility == 0 & Item_Outlet_Sales > 0)
avg <- data %>%
summarize(mean(Item_Visibility))
data <- data %>%
mutate(Item_Visibility = replace(Item_Visibility, Item_Visibility == 0, 2)) %>%
mutate(Item_Visibility = as.double(Item_Visibility))
head(data)
summary(data)
dim(train)
train <- data[1:8523]
train <- data[1:8523,]
dim(train)
test <- data[8524:nrow(data),]
dim(test)
head(test)
store_lm <- lm(Item_Outlet_Sales~., train)
store_lm <- lm(Item_Outlet_Sales~., train)
2+2
summary(store_lm)
mean_sales <- mean(train$Item_Outlet_Sales)
mean_sales
base1 <- tibble(test$Item_Identifier, test$Outlet_Identifier)
base1
base1 <- tibble(test$Item_Identifier, test$Outlet_Identifier, 'Item_Outlet_Sales' = mean_sales)
base1
store_lm <- lm(Item_Outlet_Sales~(-Item_Identifier + Outlet_Identifier), train)
summary(store_lm)
store_lm <- lm(Item_Outlet_Sales~(-Item_Identifier, Outlet_Identifier), train)
store_lm <- lm(Item_Outlet_Sales~(-Item_Identifier -Outlet_Identifier), train)
summary(store_lm)
store_lm <- lm(Item_Outlet_Sales~.-Item_Identifier -Outlet_Identifier, train)
summary(store_lm)
glmnet?
v
store_lm <- lm(Item_Outlet_Sales~.-Item_Identifier -Outlet_Identifier, train)
summary(store_lm)
par(mfrow <- c(2,2))
plot(store_lm)
?contrasts
ggpairs(data)
library(GGally)
install.packages("GGally")
library(GGally)
ggpairs(data)
colnames(data)
ggpairs(subsect(data, select = -c(Item_Identifier, Outlet_Identifier))
ggpairs(subsect(data, select = -c(Item_Identifier, Outlet_Identifier))
ggpairs(subset(data, select = -c(Item_Identifier, Outlet_Identifier))
ggpairs(subset(data, select = -c(Item_Identifier, Outlet_Identifier))
cor_df <- subset(data, select = -c(Item_Identifier, Outlet_Identifier))
ggpairs(cor_df)
ggpairs(cor_df[1:15])
ggpairs(cor_df[,1:15])
ggpairs(cor_df[,1:ncol(cor_df)])
cor_df <- subset(data, select = -c(Item_Identifier, Item_Type, Outlet_Identifier))
ggpairs(cor_df)
cor(cor_df)
cor(cor_df[,1:14])
dim(cor_df)
cor(cor_df[,1:9])
cor_df <- subset(data, select = -c(Item_Identifier, Item_Type, Outlet_Identifier))
cor(cor_df[,1:9])
cor(cor_df[,1:ncol(cor_df)])
head(cor_df)
confint(store_lm)
